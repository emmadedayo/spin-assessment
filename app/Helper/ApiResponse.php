<?php

//Class generated by Adenagbe Emmanuel on 17/04/2024

namespace App\Helper;

use Illuminate\Http\JsonResponse;
use Illuminate\Support\Arr;

class ApiResponse
{
    /**
     * Returns a standardized success response.
     *
     * @param  string  $message  The success message.
     * @param  mixed  $data  (optional) The data to include in the response.
     * @param  int  $statusCode  (optional) The HTTP status code (defaults to 200).
     */
    public function success(string $message, $data = null, int $statusCode = 200): JsonResponse
    {
        if ($data) {
            return response()->json([
                'success' => true,
                'message' => $message,
                'data' => $data,
            ], $statusCode);
        } else {
            return response()->json([
                'success' => true,
                'message' => $message,
            ], $statusCode);
        }
    }

    /**
     * Returns a standardized failed response.
     *
     * @param  string  $message  The error message.
     * @param  int  $statusCode  (optional) The HTTP status code (defaults to 400).
     */
    public function failed(string $message, int $statusCode = 400): JsonResponse
    {
        return $this->respond([
            'success' => false,
            'message' => $message,
        ], $statusCode);
    }

    /**
     * Returns a validation error response using Laravel's default format.
     *
     * @param  array  $errors  The validation errors.
     * @param  int  $statusCode  (optional) The HTTP status code (defaults to 422).
     */
    public function validation(array $errors, int $statusCode = 422): JsonResponse
    {
        $firstErrorMessage = '';
        if (! empty($errors)) {
            $firstErrorMessage = Arr::get($errors, head(array_keys($errors)))[0];
        }

        return response()->json([
            'message' => $firstErrorMessage,
            'success' => false,
        ], $statusCode);
    }

    /**
     * Creates a standardized response based on the provided data and status code.
     *
     * @param  array  $data  The response data.
     * @param  int  $statusCode  The HTTP status code.
     */
    private function respond(array $data, int $statusCode): JsonResponse
    {
        return response()->json($data, $statusCode);
    }
}
